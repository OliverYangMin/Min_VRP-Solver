require '01Class.Move'
require '01Class.Delta'
require '01Class.Feasible'
require '01Class.Node&Giant'
require '01Class.Route&Solution'
require '02Module.BasicFunction'
VRPIO = require '02Module.VRPIO'   
Constructives = require '02Module.Constructives'
Algorithms = require '02Module.Algorithms'

function main()
   -- require 'mobdebug'.off()
    nodes, Dis, Time, vehicle = VRPIO.read_solomon('R102', 50)
    math.randomseed(195)
    local starttime = os.clock()
    solution = Solution:new()
    Constructives.NearestInsertion(0.9, 0.05, 0.05)
    solution:plot()
    solution:to_giantTour()
    cDelta = Delta:new()
    feasible = Feasible:new() 
    
-------------------------Improvement Phase------------------------------------------------------------------------------------------- 
   -- require 'mobdebug'.on()
    solution = Algorithms.VariableNeighborhoodSearch({node_relocate, node_swap, two_opt_star}, 80)
    --solution, records = SimulateAnnealing(node_relocate)
    
    solution = nodes:to_solution()
    solution:plot()
    --require 'mobdebug'.on()
    print('The algorithm`s total computation time = ', os.clock() - starttime)
    print('The total cost of best tour plan = ', solution:getCost())
    print('The number of vehicle be used: ', #solution)
end 
main()