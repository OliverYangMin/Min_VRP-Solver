local function ModuleInit()
    local obj = io.popen('cd')
    local path = obj:read('*all'):sub(1, -2)
    obj:close()
    package.path = package.path .. ';' .. path.. '\\00Data\\?.lua;' .. path.. '\\01Class\\?.lua;' .. path.. '\\02Module\\?.lua'
    require 'Move'
    require 'Delta'
    require 'Feasible'
    require 'Solution'
    require 'Route'
    require 'GiantTour'
    require 'BasicFunction'
    
    VRPIO = require 'VRPIO'   
    Constructives = require 'Constructives'
    Algorithms = require 'Algorithms'
--    Preprocessing = require 'Preprocessing'
end 

function main()
    --require 'mobdebug'.off()
    ModuleInit()
    nodes, Dis, Time, vehicle = VRPIO.read_solomon('R101', 100)
    math.randomseed(195)
    local starttime = os.time()
    
    solution = Solution:new()
    Constructives.NearestInsertion(0.9, 0.05, 0.05)
--    --Constructives.ClarkWright(0, 0.8)
    solution:convert2Giant()
    giant = GiantTour:new() 
    cDelta = Delta:new()
    feasible = Feasible:new()
    
-----------------------Improvement Phase-------------------------------------------------------------------------------------------    
    Algorithms.SteepestDescent(node_swap)
    Algorithms.SteepestDescent(two_opt_star)
    --require 'mobdebug'.on()
    Algorithms.SteepestDescent(node_relocate)
    
--    routes = Algorithms.SimulateAnnealing(node_relocate)
--    print(routes.cost)
    --require 'mobdebug'.on()
    displayResult(starttime)
end 

main()


