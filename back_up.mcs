function isIn(node, cSet)
    for i=1,#cSet do
        if node == cSet[i] then
            return true
        end 
    end 
end 

validInequalities = {}

function getNodesSet(cSet)
    local count = 0
    for r=1,#nodes do
        if not isIn(r, cSet) and 
            count = cout + 1
            getNodeSet(cSet)
        end 
    end 
    if count == 0 and cSet:getVehicle > 1 then
        validInequalities[#validInequalities+1] = cSet
    end 
end 

function separationAlgorithm()

end 

--local module_vrp 	= AddModule("main","Solve VRP")

--local prm_vrp 		= AddParameter(module_vrp, nil, "node", "Disruption Parameters")
--CONSTRUCTIVES       = AddParameter(module_vrp, prm_vrp, "choice", "Constructive Algorithms", "ad hoc|Nearest Neighbor|Clarke Wright|Sweep", 1)
--SEQUENCES           = AddParameter(module_vrp, prm_vrp, "choice", "Sequece based Algorithms", "None|SA|GRASP|TS|VNS|ILS", 1)
----SETS                = AddParameter(module_vrp, prm_vrp, "choice", "Set based Algorithms", "None|GA|MA|ACO", 1)
--local display_vrp       = AddParameter(module_vrp, nil, "node", "Date Parameters")
--CONSOLEDISPLAY          = AddParameter(module_vrp, display_vrp, "check", "Is console output?", true)
--FIGUREDISPLAY           = AddParameter(module_vrp, display_vrp, "check", "Is figure output?", true) 
--FILEDISPLAY             = AddParameter(module_vrp, display_vrp, "check", "Is file output?", false)


--routesNum = 3
--SMD1_0 = {}
--for i=1,#nodes do
--    SMD1_0[i] = {}
--    for j=1,#node+routesNum do
        
    
--    end 
--end

--local function creatRoute(node)
--    local route_id = -giant:getRouteNum()-1
--    nodes[route_id] = DeepCopy(nodes[0])
--    nodes[route_id].suc = node
--    nodes[node].pre = route_id 
--    nodes[node].suc = -1
--    nodes[-1].pre = node
--    nodes[node].route = 
--end 

--function back_forth()
--    local r = -1
--    for i=1,#nodes do
--        nodes[i].pre = r
--        nodes[i].suc = r-1
--        r = r + 1
--        markForward(i)
--        markBackward(i)
--    end 
--    nodes[#nodes].suc = -1
--end 

--Class Name: Solution
--Meaning: The abstraction of routes result
--Attributes: cost, penaCost, feasible, routes
--Methods: getCost(), isFeasible(), appendRoute(), clone(), sort(), executeMove(),

Solution = {cost = false, pena_cost = false, feasible = true}
Solution.__index = Solution

function Solution:new()
    local self = {}
    setmetatable(self, Solution)
    self.cost = false
    self.pena_cost = false
    self.feasible = true
    return self
end 



local function copyKeyValue(toTab, fromTab)    
    for key,value in pairs(fromTab) do
        toTab[key] = value
    end 
end




function Solution:convert2Giant()
    for r,route in ipairs(self) do
        nodes[-r] = {suc=route[1].id, route=-r, vtp=route.vtp}
        copyKeyValue(nodes[-r], nodes[0])
        copyKeyValue(nodes[-r], route[0])
        
        if #route > 1 then 
            nodes[route[1].id].pre, nodes[route[1].id].suc = -r, route[2].id
            for i=2,#route-1 do nodes[route[i].id].pre, nodes[route[i].id].suc = route[i-1].id, route[i+1].id end 
            nodes[route[#route].id].pre, nodes[route[#route].id].suc = route[#route-1].id, -r - 1
        else
            nodes[route[1].id].pre, nodes[route[1].id].suc = -r, -r - 1
        end 
    
        for i=1,#route do 
            copyKeyValue(nodes[route[i].id], route[i])
            nodes[route[i].id].route, nodes[route[i].id].vtp = -r, route.vtp
        end 
    end 
    nodes[self[#self][#self[#self]].id].suc = -1
    for i=2,#solution do
        nodes[-i].pre = self[i-1][#self[i-1]].id
    end 
    nodes[-1].pre = self[#self][#self[#self]].id
end 

function Solution:getCost()
    local cost = 0
    local total_distance = 0
    for r,route in ipairs(self) do
        for i=1,#route do
            if route[i].bT > nodes[route[i].id].time2 then 
                self.isfeasible = false
                self.cost = math.huge 
                return self.cost
            end
            cost = cost + dis(route[i-1].id,route[i].id) * vehicle[route.vtp].tc + math.max(0,  nodes[route[i].id].time1 - route[i].bT) * vehicle[route.vtp].wc
            total_distance = total_distance +  dis(route[i-1].id,route[i].id)
        end 
        cost = cost +  vehicle[route.vtp].fc + dis(route[#route].id,0) * vehicle[route.vtp].tc
        total_distance = total_distance +  dis(route[#route].id,0)
    end 
    print('Total distance: ', total_distance)
    self.cost = cost
    return self.cost
end 



function Solution:output()
    io.output(#solution .. '+'.. solution:getCost() .. 'Result.csv')
    io.write('trans_code   ,  vehicle type , visit count , total weight, loading wegiht, total volume,  loading volume,  origin, customer id-arrival time\n')
    for i=1,#self do
        io.write(string.format('DP%04d, %d, %d,', i, self[i].v_type, #self[i]))
        io.write(string.format('%d,', vehicle[self[i].v_type].weight))
        io.write(string.format('%f,', self[i][1].bW))
        io.write(string.format('%d,', vehicle[self[i].v_type].volume))
        io.write(string.format('%f,', self[i][1].bV))
        --local totalDistance = 0        
        for j=0,#self[i] do
            if j<#self[i] then
                io.write(string.format('%d-%02d:%02d,', self[i][j].id, math.floor(self[i][j].bT/60), self[i][j].bT%60))
            else 
                io.write(string.format('%d-%02d:%02d', self[i][j].id, math.floor(self[i][j].bT/60),self[i][j].bT%60 ))
            end
        end
        io.write('\n')
        io.write(string.format('time window, , , ,  %f%%, , %f%%,', self[i][1].bW/vehicle[self[i].v_type].weight*100, self[i][1].bV/vehicle[self[i].v_type].volume*100))    
        for j=0,#self[i] do
            if j<#self[i] then
                io.write(string.format('%02d:%02d-%02d:%02d,', math.floor(nodes[self[i][j].id].time1/60),nodes[self[i][j].id].time1%60, math.floor(nodes[self[i][j].id].time2/60), nodes[self[i][j].id].time2%60))
            else 
                io.write(string.format('%02d:%02d-%02d:%02d', math.floor(nodes[self[i][j].id].time1/60),nodes[self[i][j].id].time1%60, math.floor(nodes[self[i][j].id].time2/60), nodes[self[i][j].id].time2%60))
            end
        end
        io.write('\n')
    end
    
    io.close()
end 
