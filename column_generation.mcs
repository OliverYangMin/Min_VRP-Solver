local model	= AddModule("main", 'Solve VRPTW with Branch&Bound')
local TYPE      = AddParameter(model, nil, 'choice', 'Type of Solomon', "C|R|RC", 1)
local NUMBER	= AddParameter(model, nil, 'value', 'the number of solomon', 1)
local SIZE      = AddParameter(model, nil, 'value', 'the size of solomon', 25)

function init()
    require '01Class.Node&Giant'
    require '01Class.Route&Solution'
    require '02Module.BasicFunction'
    require '04CG.Master'
    require '04CG.Label'
    require '04CG.Forbid'
    require '04CG.BranchNode'
    VRPIO = require '02Module.VRPIO'   
    Constructives = require '02Module.Constructives'
    Algorithms = require '02Module.Algorithms'
    UpBound, BestVehicles, best_solution  = math.huge, math.huge, {}
    local solomon = {'C', 'R', 'RC'}
    nodes, Dis, Time, vehicle = VRPIO.read_solomon(solomon[TYPE] .. NUMBER + 100, SIZE)
    preprocessing()
    nodes[0].dual = 0
end 


function main()
    init()
    local starttime = os.clock()
    solution = {}
    BranchNode:new():solve()

    solution:plot(os.clock() - starttime)
    print(string.format('The best objective value is %.1f and vehicle number is %d', UpBound, BestVehicles))
    print('Total CPU time is ', os.clock() - starttime)
end

main()