require '01Class.Move'
require '01Class.Delta'
require '01Class.Feasible'
require '01Class.Node&Giant'
require '01Class.Route&Solution'
require '02Module.BasicFunction'
VRPIO = require '02Module.VRPIO'   
Constructives = require '02Module.Constructives'
Algorithms = require '02Module.Algorithms'
function init()
    local matrix = VRPIO.read_txt('Instance/CWQ/100customers')
    nodes = Giant:new()
    for i=1,#matrix do
        nodes[matrix[i][1]] = Node:new(unpack(matrix[i]))
    end
    matrix = VRPIO.read_txt('Instance/CWQ/distance', 1)
    Dis = {}
    for i=1,#matrix do
        Dis[i-1] = {}
        for j=1,#matrix[i] do
            Dis[i-1][j-1] = matrix[i][j]    
        end 
    end 
    for i=0,#matrix-1 do
        for j=i,#matrix-1 do
            Dis[i][j] = Dis[j][i]
        end 
    end 
    matrix = VRPIO.read_txt('Instance/CWQ/travel_time', 1)
    Time = {}
    for i=1,#matrix do
        Time[i-1] = {}
        for j=1,#matrix[i] do
            Time[i-1][j-1] = matrix[i][j]    
        end 
    end 
    for i=0,#matrix-1 do
        for j=i,#matrix-1 do
            Time[i][j] = Time[j][i]
        end 
    end 
    vehicle = {{weight=7, volume=0,fc=50, tc=0.002, wc=0.05}}
end 

function main()
    --require 'mobdebug'.off()
    --nodes, Dis, Time, vehicle = VRPIO.read_solomon('R101', 25)
    init()
    math.randomseed(195)
    local starttime = os.time()
    solution = Solution:new()
    Constructives.NearestInsertion(0.9, 0.05, 0.05)
    solution:plot()
    solution:to_giantTour()
    cDelta = Delta:new()
    feasible = Feasible:new() 
    
-------------------------Improvement Phase------------------------------------------------------------------------------------------- 
    --require 'mobdebug'.on()
    --solution = Algorithms.VariableNeighborhoodSearch({node_swap, two_opt_star}, 80)
    --solution = Algorithms.SimulateAnnealing(node_relocate)
    Algorithms.SteepestDescent(node_relocate)
    --Algorithms.SteepestDescent(node_swap)
--    Algorithms.SteepestDescent(two_opt_star)
    solution = nodes:to_solution()
    solution:plot()
    solution:output()
--    io.output('records.txt')
--    for i=1,#records do
--        io.write(records[i],'\n')
--    end 
--    io.close()
    --require 'mobdebug'.on()
    print('The algorithm`s total computation time = ', os.time() - starttime)
    print('The total cost of best tour plan = ', solution:getCost())
    print('The number of vehicle be used: ', #solution)
end 
main()